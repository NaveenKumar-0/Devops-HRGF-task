name: Observability Setup (Prometheus, Grafana & CloudWatch)

on:
  workflow_dispatch:  # Manual trigger
  workflow_call:      # Can be called from other workflows
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true
      aws_region:
        required: true
      eks_cluster_name:
        required: true

jobs:
  deploy-observability:
    runs-on: ubuntu-latest 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ secrets.aws_region }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.aws_region }} --name ${{ secrets.eks_cluster_name }}

      - name: Verify cluster connection
        run: kubectl get nodes

      # Install Metrics Server

      - name: Deploy Metrics Server
        run: |
          kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
          kubectl get deployment metrics-server -n kube-system

      # Install Helm
      
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      # Deploy Prometheus

      - name: Deploy Prometheus
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm upgrade --install prometheus prometheus-community/prometheus \
            --namespace monitoring --create-namespace \
            --set server.persistentVolume.enabled=false \
            --set server.service.type=NodePort \
            --set server.service.nodePort=30900

      # Deploy Grafana

      - name: Deploy Grafana
        run: |
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update
          helm search repo grafana/grafana
          helm upgrade --install grafana grafana/grafana \
            --namespace monitoring \
            --create-namespace \
            --set adminPassword=admin \
            --set service.type=NodePort \
            --set service.nodePort=30800 \
            --set persistence.enabled=false \
            --set sidecar.dashboards.enabled=true \
            --set sidecar.dashboards.label=grafana_dashboard


      # ---------------------------
      # Add default Grafana dashboard
      # ---------------------------
      - name: Add default Grafana dashboard
        run: |
          kubectl create configmap grafana-dashboards \
            --namespace monitoring \
            --from-literal=cluster-dashboard.json='
            {
              "annotations": {"list": []},
              "panels": [
                {
                  "title": "CPU Usage (Cluster)",
                  "type": "graph",
                  "targets": [{"expr": "sum(rate(container_cpu_usage_seconds_total[5m])) by (namespace)","legendFormat": "{{namespace}}"}]
                },
                {
                  "title": "Memory Usage (Cluster)",
                  "type": "graph",
                  "targets": [{"expr": "sum(container_memory_usage_bytes) by (namespace)","legendFormat": "{{namespace}}"}]
                }
              ],
              "schemaVersion": 16,
              "title": "Cluster Metrics",
              "version": 1
            }' \
            --dry-run=client -o yaml | kubectl apply -f -

          kubectl label configmap grafana-dashboards grafana_dashboard=1 -n monitoring --overwrite

     

      - name: Verify Observability Stack
        run: |
          kubectl get pods -n monitoring
          kubectl get svc -n monitoring

      - name: Access Grafana & Prometheus
        run: |
          echo "Fetching public IPs of worker nodes..."
          NODE_IPS=$(kubectl get nodes -o jsonpath='{range .items[*]}{.status.addresses[?(@.type=="ExternalIP")].address}{"\n"}{end}')
          echo "Worker node public IPs:"
          echo "$NODE_IPS"
          echo ""
          echo "Access Grafana at http://<NODE_IP>:30800"
          echo "Access Prometheus at http://<NODE_IP>:30900"
          echo ""
          echo "Replace <NODE_IP> with any of the above public IPs."
